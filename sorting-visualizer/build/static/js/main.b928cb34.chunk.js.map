{"version":3,"sources":["algorithms/mergeSort.js","resetArray.js","HeaderMenu.js","algorithms/bubbleSort.js","algorithms/selectionSort.js","Bar.js","SortBars.js","SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["mergeSort","arr","l","r","animations","length","current","mid","Math","floor","sliced","i","k","j","push","Array","merge","slice","resetArray","maxBars","maxSize","minSize","random","HeaderMenu","setMaxBars","curArray","setCurArray","setBarWidth","barWidth","speed","setSpeed","className","id","onClick","window","innerHeight","innerWidth","type","min","max","onChange","e","prev","target","value","class","tmp","bubbleSort","largest","console","log","selectionSort","Bar","width","height","style","useMemo","React","memo","useEffect","cur","shift","setTimeout","map","val","ind","key","SortingVisualizer","useState","useRef","App","textAlign","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b928cb34.chunk.js","sourcesContent":["export default function mergeSort(arr, l, r, animations){\r\n    if(l==0 && r== arr.length-1 && animations.current.length != 0){\r\n        return;\r\n    }\r\n    if( l< r){\r\n        let mid = Math.floor((r-l)/2) +l\r\n        mergeSort(arr, l, mid, animations)\r\n        mergeSort(arr, mid+1, r, animations)\r\n\r\n        merge(arr, l, mid, r, arr.slice(l, r+1), animations)\r\n\r\n    }\r\n\r\n}\r\n\r\nfunction merge(arr, l, mid, r, sliced, animations){\r\n    //animations.current.push(new Array(...arr))\r\n\r\n    let i=0\r\n    let k=0\r\n    let j=mid-l+1\r\n    while(i <= mid-l && j <= r-l){\r\n        //animations.current.push(new Array(...arr))\r\n\r\n        if( sliced[i] > sliced[j]){\r\n            arr[l+k++] = sliced[i++]\r\n            //animations.current.push(new Array(...arr))\r\n\r\n          \r\n        } else{\r\n            arr[l+k++] = sliced[j++]\r\n           // animations.current.push(new Array(...arr))\r\n\r\n          \r\n        }\r\n        //animations.current.push(new Array(...arr))\r\n\r\n    }\r\n\r\n   // animations.current.push(new Array(...arr))\r\n\r\n    while(i<=mid-l) arr[l+k++]= sliced[i++]\r\n    while(j<=r-l) arr[l+k++]= sliced[j++]\r\n    animations.current.push(new Array(...arr))\r\n\r\n\r\n}","export default function resetArray(maxBars, maxSize, minSize){\r\n    let arr = [];\r\n    \r\n    for(let i=0; i<maxBars; i++){\r\n        arr.push( Math.floor(Math.random()* (maxSize-minSize)) + minSize );\r\n    }\r\n\r\n    return arr;\r\n}","import React ,{useCallback} from 'react'\r\nimport './HeaderMenu.css';\r\nimport mergeSort from './algorithms/mergeSort'\r\nimport selectionSort from './algorithms/selectionSort'\r\nimport bubbleSort from './algorithms/bubbleSort'\r\nimport resetArray from './resetArray'\r\n\r\nexport default function HeaderMenu({setMaxBars,maxBars, curArray, setCurArray,animations, barWidth, setBarWidth, speed, setSpeed}) {\r\n    const merge = ()=>{\r\n        mergeSort(curArray, 0, curArray.length-1, animations); \r\n        setCurArray(animations.current[4])\r\n    }\r\n    const selection = ()=>{\r\n        selectionSort(curArray,  animations); \r\n        setCurArray(animations.current[4])\r\n    }\r\n\r\n    const bubble = () =>{\r\n        bubbleSort(curArray,  animations); \r\n        setCurArray(animations.current[4])\r\n    }\r\n    const initArray=\r\n        () => {\r\n            setCurArray(resetArray(maxBars, Math.floor(window.innerHeight*0.8), 5 ))\r\n            setBarWidth((window.innerWidth*0.9-4*maxBars)/maxBars)\r\n        }\r\n    return (\r\n\r\n        <div className=\"HeaderMenu\">\r\n            <div className=\"Logo\">\r\n                <h1>Sorting Visualizer</h1>\r\n            </div>\r\n\r\n            <div className=\"funcButton\">\r\n                <button id=\"createNewArray\" onClick={initArray}>Generate New Array</button>\r\n                <div className=\"ranges\">\r\n                    <input type=\"range\" min=\"5\" max=\"300\" onChange={(e)=>setMaxBars((prev)=>e.target.value)}/>\r\n                    <input type=\"range\" min=\"1\" max=\"9\" onChange={(e)=>setSpeed((prev)=>e.target.value)}/> \r\n                </div>\r\n                <div class=\"parameters\">\r\n                    <span>Size: {maxBars}</span>\r\n                    <span>Speed: {speed}</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"algorithmButton\">\r\n                <button id=\"mergeSort\" onClick={merge}>Merge Sort</button>\r\n                <button id=\"bubbleSort\" onClick={bubble}>Bubble Sort</button>\r\n                <button id=\"selectionSort\" onClick={selection}>Selection Sort</button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export default function bubbleSort(arr, animations){\r\n if(animations.current.length != 0)\r\n        return;\r\n\r\n    for(let i = 0; i < arr.length; i++) {\r\n        animations.current.push(new Array(...arr))\r\n\r\n        for(let j = 0; j < arr.length-i; j++){\r\n            animations.current.push(new Array(...arr))\r\n\r\n            if(arr[j+1] > arr[j]) {\r\n                let tmp = arr[j]; \r\n                arr[j] = arr[j+1];\r\n                arr[j+1] = tmp; \r\n            }\r\n\r\n         }\r\n         animations.current.push(new Array(...arr))\r\n\r\n\r\n    }\r\n    animations.current.push(new Array(...arr))\r\n\r\n\r\n}\r\n\r\n","export default function selectionSort(arr, animations){\r\n    if(animations.current.length != 0)\r\n        return;\r\n\r\n        for(let i = 0; i < arr.length; i++) {\r\n            //animations.current.push(new Array(...arr))\r\n\r\n            let largest = i;\r\n            for(let j = i; j < arr.length; j++){\r\n                if(arr[j] > arr[largest]) {\r\n                    largest=j; \r\n                }\r\n                //animations.current.push(new Array(...arr))\r\n\r\n             }\r\n             if (largest != i) {\r\n                 let tmp = arr[i]; \r\n                 arr[i] = arr[largest];\r\n                 arr[largest] = tmp;      \r\n            }\r\n            animations.current.push(new Array(...arr))\r\n\r\n        }\r\n        animations.current.push(new Array(...arr))\r\n        console.log(arr)\r\n\r\n\r\n}\r\n\r\n","import React, {useMemo} from 'react'\r\nimport './Bar.css'\r\n\r\nfunction Bar({width, height}) {\r\n    const style = useMemo(()=>{\r\n        return {\r\n            width: width,\r\n            height :height\r\n        }\r\n    },[width,height])\r\n    return (\r\n        <div className=\"bar\" style={style}>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bar\r\n","import React ,{useState, useEffect, useRef} from 'react'\r\nimport Bar from './Bar'\r\nimport './SortBars.css'\r\nimport resetArray from './resetArray'\r\n\r\nfunction SortBars({maxBars, curArray, setCurArray,animations, barWidth, setBarWidth, speed, setSpeed}) {\r\n    \r\n  \r\n\r\n\r\n    useEffect(()=>{\r\n        setCurArray(resetArray(maxBars, Math.floor(window.innerHeight*0.8), 5 ))\r\n        setBarWidth((window.innerWidth*0.9-4*maxBars)/maxBars)\r\n    },[maxBars])\r\n\r\n    useEffect(()=>{        \r\n\r\n      if(animations.current.length > 0){\r\n        let cur = animations.current.shift()\r\n        setTimeout(()=>setCurArray(cur),(10-speed)*10) \r\n        //setCurArray(cur) \r\n      } \r\n    })\r\n\r\n    \r\n    //;\r\n\r\n    return (\r\n        <div className=\"SortBars\">\r\n            {curArray.map((val,ind)=>{\r\n                return (\r\n                    <Bar width={barWidth} height={val} key={ind} />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default React.memo(SortBars)","import React ,{useState, useRef} from 'react'\r\nimport HeaderMenu  from './HeaderMenu';\r\nimport SortBars from './SortBars';\r\n\r\nfunction SortingVisualizer() {\r\n    const [maxBars, setMaxBars] = useState(100);\r\n    const [speed, setSpeed] = useState(9);\r\n    const [curArray, setCurArray] = useState([]);\r\n    const [barWidth, setBarWidth]= useState()\r\n    const animations = useRef([])\r\n    return (\r\n        <div className=\"SortingVisualizer\">\r\n            <HeaderMenu setMaxBars={setMaxBars} maxBars={maxBars} curArray={curArray} setCurArray={setCurArray} animations={animations} barWidth={barWidth} setBarWidth={setBarWidth} speed={speed} setSpeed={setSpeed}/>\r\n            <SortBars maxBars={maxBars} curArray={curArray} setCurArray={setCurArray} animations={animations} barWidth={barWidth} setBarWidth={setBarWidth} speed={speed} setSpeed={setSpeed}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SortingVisualizer\r\n","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer';\nfunction App() {\n  return (\n    <>\n      {\n      window.innerWidth > 500 ?\n      <SortingVisualizer />\n      : (\n        <h1 style={{textAlign: \"center\"}}>Screen size too small!! Please open in a bigger Screen</h1>\n      )\n      }\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}